name: EC2 Deploy
on:
  pull_request_target:
    branches:
      - main
    types:
      - closed
permissions:
  id-token: write
  contents: read
jobs:
  deploy:
    if: github.repository == 'TripleA-Project/TripleA-FrontEnd' && github.event.pull_request.merged == true
    name: ec2Deploy
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: Get Github Actions IP
        id: ip
        uses: haythem/public-ip@v1.3
      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-region: ${{ secrets.AWS_REGION }}
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
      - name: Add Github Actions IP to Security Group
        run: |
          aws ec2 authorize-security-group-ingress --group-id ${{ secrets.AWS_SG_ID }} --protocol tcp --port 22 --cidr ${{ steps.ip.outputs.ipv4 }}/32
      - name: Pull Image and Run
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ${{ secrets.EC2_USER }}
          key: ${{ secrets.AWS_SSH_KEY }}
          script_stop: true
          script: |
            docker pull ${{ secrets.DOCKER_LATEST_TAG }}
            if docker ps --format '{{.Names}}' | grep -q "front_container"; then
              docker stop front_container
              docker rm front_container
            fi
            docker run --name frontend_container --restart=always -itd -p 80:3000 ${{ secrets.DOCKER_LATEST_TAG }}
            if docker images -q -f "dangling=true" | grep -q .; then
              docker rmi $(docker images -q -f "dangling=true")
            fi
      - name: Remove Github Actions IP From Security Group
        if: always()
        run: |
          aws ec2 revoke-security-group-ingress --group-id ${{ secrets.AWS_SG_ID }} --protocol tcp --port 22 --cidr ${{ steps.ip.outputs.ipv4 }}/32
